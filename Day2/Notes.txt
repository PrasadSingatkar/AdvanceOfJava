Collections Framework
==================================================================
Framework : readymade implementations of standard design patterns
Collection framework encapsulates ready made implementation of algorithms.
Ex. searching, sorting 
gives us a readymade implementation of different data structures
==================================================================
Iterable :
the root interface of collection framework

Collection :
Extends Iterable and serves as the base interface for various collection types.
It defines standard operations like adding, removing, and checking the size of the collection.

List :
Extends Collection and represents an ordered collection.
It allows duplicate elements and gives access to elements by their index.
==================================================================
List Implementations:
1. ArrayList : A resizable array-based implementation
2. LinkedList : 
3. Vector
==================================================================
1. ArrayList 

Characteristics:
~ Dynamically resizable array
~ Allows fast random access(index based)

import java.util.ArrayList;

public class ArrayListExample {
    public static void main(String[] args){
        ArrayList<String> names = new ArrayList<>();

        //Adding elements
        names.add("Krishna");
        names.add("Govind");
        names.add("Gopal");

        // Accessing elements by index
        System.out.println("First element : " +names.get(0));

        // Iterating through the list
        for(String name : names){
            System.out.println(name);
        }

        // Removing an element
        names.remove("Gopal");

        System.out.println("After Removal : " + names);
    }
}

ArrayList methods :
1. add(E e) - Adds an element to the list
2. get(int index) - Returns the element at the specified index
3. remove(int index) - removes an element by index
4. size() - returns the number of elements 
    -> int size = names.size();
5. contains(Object o) - Checks if the list contains an element
   -> boolean hasName = names.contains("Gopal");
6. clear() - Removes all elements from the list.
   -> names.clear();
==================================================================
2. LinkedList : 
Characteristics:
~ Better for insertion/deletion operations as no resizing is needed.
~ implements List and Deque
~ Doubly-Linked list structure

import java.util.LinkedList;

public class LinkedListExample {
    public static void main(String[] args){
        LinkedList<String> tasks = new LinkedList<>();


        //Adding elements
        tasks.add("Read");
        tasks.add("Write");
        tasks.add("Exercise");

        //Adding elements at specific positions
        tasks.addFirst("Wake Up");
        tasks.addLast("Sleep");

        //Accessing the elements
        System.out.println("First Task is " + tasks.getFirst() );

        //To iterate
        for(String task : tasks){
            System.out.println(task);
        }

        // Removing Elements
        tasks.removeFirst();
        tasks.removeLast();

        System.out.println("After Removal : " + tasks);
    }
}

LinkedList methods :
~ addFirst(E e) - adds an element at the beginning
~ addLast(E e) - adds an element at the end 
~ getFirst() / getLast() - Retrieves the first or last element
~ removeFirst() / removeLast() - Removes the first or last element
~ add(int index, E element ) - Inserts an element at a specified position
==================================================================
3. Vector
Characteristics:
~ Similar to ArrayList but synchronized (thread-safe)

import java.util.Vector;

public class VectorExample {
    public static void main(String[] args){
        Vector<Integer> numbers = new Vector<>();

        // Adding Elements
         numbers.add(10);
         numbers.add(20);
         numbers.add(30);

         //Accessing elements by index
        System.out.println("First Number is " + numbers.get(0));

        // Iterate through the vector
        for( Integer number: numbers){
            System.out.println(number);
        }

        //Removing an element
        numbers.remove((Integer) 20); // Removing by value
        System.out.println("After Removal : "+ numbers);
    }
}

Vector methods :
add(E e) : Adds an element to the vector
get(int index) : Returns the element at a specified index
remove(int index) : Removes an element by index or object
size() : Returns the size of the vector
capacity() : Returns the capacity of the vector
isEmpty() : Checks if the vector is empty.
==================================================================














